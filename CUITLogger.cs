using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Xml;
using CUITLogger.Report;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium;
using OpenQA.Selenium.PhantomJS;

namespace CUITLogger
{
    /// <summary>
    ///     Pre-requisite
        ///1. Copy the QTAgent.bat from the pre-requsiste folder and run it ---> this is a one time thing . change the path in the QTagent for the QTagent.config
        ///2. Create a folder caleld external and add apteanlogger.dll , phantomjs ( set to copy always) & loggerconfig in that folder. Reference the dll to the project
        ///3. Enable in test manager -> test settings for the product -> data and diagnostics. enable event logs and hit configure. There you can enable all the event typoes to collect any data
        ///4. imnplement as in example codedUI test
    /// </summary>
    public class CuitLogger
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CuitLogger"/> class.
        /// </summary>
        public CuitLogger()
        {
        }
        protected  TestCaseInfo Testcaseinfo {get;set;}
        public TestContext TestContext{get;set;}
        /// <summary>
        /// Reading the loggerconfig to set the splunk path.
        /// </summary>
        /// <returns></returns>
        public string SplunkLogPath ()
        { 
                XmlDocument documet = new XmlDocument();
                documet.Load("Externals\\LoggerConfig.xml"); 
                XmlElement doc = documet.DocumentElement;
                XmlNode nodes = documet.SelectSingleNode("//AppConfig/AppSettings/Data");
                XmlElement controlEl = (XmlElement)nodes;
                string value = controlEl.GetAttribute("value");
                return value;
           
        }
        /// <summary>
        /// Prerequisite  - .
        /// </summary>
        public void Logger()
        {
            try
            {
                //reading the log file generated by the coded ui by launching the phantomjs & generating different logs
                
                string totaltime, testOutcome = "Passed";
                List<IWebElement> tags;
                IWebElement Element;
                string defaultSplunkLogDirectory = null;
                string splunkLogPath = this.SplunkLogPath();
                string testResultsDirectory = LogFilePath();
                //  string SplunkLogPath = this.SplunkLogPath;
                this.Testcaseinfo = new TestCaseInfo(this.GetType().GetMethod(TestContext.TestName), this);
                Testcaseinfo.StartTime = DateTime.Now;
                IWebDriver driver = new PhantomJSDriver("Externals");
                driver.Navigate().GoToUrl("file:///" + testResultsDirectory);
                tags = driver.FindElements(By.CssSelector(".g-h.passed")).ToList();

                try
                {
                    Element = driver.FindElement(By.CssSelector(".g-h.failed"));
                    IWebElement exception = driver.FindElement(By.ClassName("e-m"));
                    tags.AddRange(driver.FindElements(By.CssSelector(".g-h.failed")));
                    tags.Add(exception);
                }
                catch
                {
                    Element = null;
                }
                if (Element != null)
                {
                    testOutcome = "Failed";
                    Testcaseinfo.TestOutCome = testOutcome;
                }
                else
                {
                    Testcaseinfo.TestOutCome = testOutcome;
                }

                //Create Directoory
                string logDirectory = "C:\\TestLog\\" + DateTime.Now.ToString("yyyy_MM_dd") + "\\Result_" + Testcaseinfo.TestName;
                if (splunkLogPath.Equals("null"))
                {
                    defaultSplunkLogDirectory = "C:\\TestLog\\SplunkLogs";
                }
                else
                {
                    defaultSplunkLogDirectory = splunkLogPath;
                }
                DirectoryInfo directory = new DirectoryInfo(logDirectory);
                if (!directory.Exists)
                {
                    directory.Create();
                }
                DirectoryInfo splunklog = new DirectoryInfo(defaultSplunkLogDirectory);
                if (!splunklog.Exists)
                {
                    splunklog.Create();
                }
                DirectoryInfo temp = new DirectoryInfo("C:\\Temp");
                if (!temp.Exists)
                {
                    directory.Create();
                }

                if (File.Exists("C:\\Temp\\Result.txt"))
                {
                    File.Delete("C:\\Temp\\Result.txt");
                }

                foreach (IWebElement element in tags)
                {
                    string value = element.GetAttribute("textContent").Remove(element.GetAttribute("textContent").Length - 8);

                    if (Testcaseinfo.TestName == null)
                    {
                        totaltime = element.GetAttribute("textContent").Substring(element.GetAttribute("textContent").Length - 8); ;
                        Testcaseinfo.TestName = value;
                    }
                    else
                    {
                        Logger log = new Logger();

                        log.GenerateLog(value);
                    }
                }


                // Genrating splunk log
                SplunkXmlTestRunReport splunkxmltestrunreport = new SplunkXmlTestRunReport();

                splunkxmltestrunreport.Generate(Testcaseinfo, defaultSplunkLogDirectory);

                //generating xml log
                XmlTestRunReport xmlrunreport = new XmlTestRunReport();

                xmlrunreport.Generate(Testcaseinfo, logDirectory);

                //Html log
                File.Copy(testResultsDirectory, logDirectory + "\\Result.Html", true);

                //Json log for Future

                // Killl the PhantomJs
                Process[] processs = Process.GetProcessesByName("PhantomJS");
                if (processs.Count() > 0)
                {
                    foreach (var process in processs)
                    {
                        process.Kill();
                    }
                }
            }
            catch(Exception ex)
            {
                Logger log = new Logger();

                log.GenerateLog(TestContext.TestResultsDirectory);
                log.GenerateLog(TestContext.TestRunResultsDirectory);
                log.GenerateLog(TestContext.TestLogsDir);
                log.GenerateLog(TestContext.ResultsDirectory);
                DirectoryInfo directory = new DirectoryInfo(this.TestContext.TestResultsDirectory);
                string fullPath = directory.GetFiles("*.html").First().FullName;
                log.GenerateLog(fullPath);
            }
        }

        /// <summary>
        /// Logs the file path.
        /// </summary>
        /// <returns></returns>
        public string LogFilePath()
        {
            DirectoryInfo directory = new DirectoryInfo(this.TestContext.TestResultsDirectory);
            string fullPath = directory.GetFiles("*.html").First().FullName;
            return fullPath;
        }

    }
}
